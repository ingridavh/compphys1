//Testing the class for a 2x2-lattice

-------------program-------------------------

int main()
{
    cout << "This is a spin system" << endl;
    //Needed parameters are;
    //char outfilename, mcs, initial_temp, final_temp, temp_step

    string outfilename = "results";

    long idum;
    int mcs = 1000000;
    double initial_temp = 1.0;
    double final_temp = 1.0;
    double temp_step = 1;

    int n_spins = 2;

    spinsystem A(n_spins);
    A.go(outfilename, mcs, initial_temp,final_temp, temp_step);

    cout << "This is the end" << endl;
    return 0;
}

-------------------------------------------

-----------output--------------------------
This is a spin system
1 	 -7.98341 	 0.132461 	 3.99444 	 15.9723 	0.0167251
This is the end
-------------------------------------------

-------Using the class on a 20x20 lattice with temp 1, 2.4--------------
int main()
{
    //Needed parameters are;
    //char outfilename, mcs, initial_temp, final_temp, temp_step

    string outfilename = "prettywoman_.txt";
    double n_cycl = 1E5;
    double initial_temp = 2.4;
    double final_temp = 2.4;
    double temp_step = 1;
    int n_spins = 20;

//    spinsystem A(n_spins);
//    A.go(outfilename, n_cycl, initial_temp,final_temp, temp_step);
    //Open output file


    ofstream myfile;
    myfile.open(outfilename.c_str(), ofstream::out);
    if (!myfile.is_open()){
        cout << "FILE " << outfilename.c_str() << " not opened, aborting!" << endl;
        terminate();
    }

    spinsystem mysystem(n_spins);
    mysystem.go(outfilename, n_cycl, initial_temp, final_temp, temp_step);

    return 0;
}
---------------------------------------------------------------------------



------------------------------------------------------------------
//Testing function for MPI

int main(int argc, char* argv[])
{
    int nproc;
    int myrank;

    ofstream ofile;
    string filename=argv[1];

    MPI_Init (&argc, &argv);
    MPI_Comm_size (MPI_COMM_WORLD, &nproc);
    MPI_Comm_rank (MPI_COMM_WORLD, &myrank);

    if (myrank == 0 && argc <= 5) {
        cout << "Bad Usage: " << argv[0] <<
                " read output file, Number of spins, mc cycles, initial temp, final temp and temp step" << endl;
        exit(1);
    }

    //Tell all nodes about initial variables
    int n_spins = atoi(argv[2]);
    int mcs = atoi(argv[3]);
    double initial_temp = atof(argv[4]);
    double final_temp = atof(argv[5]);
    double temp_step = atof(argv[6]);

    //Testing different method

    double dT = (final_temp - initial_temp) / (double) nproc;

    //Assign temperatures to nodes
    double initial_my_temp = initial_temp + myrank*dT;
    double final_my_temp = initial_my_temp + dT - temp_step;

    cout << "Worker bee number " << myrank << " of " << nproc << " will work from temp " <<
            initial_my_temp << " to " << final_my_temp << endl;

    //Open one file per node

    ostringstream oss;
        oss << filename << n_spins << "_rank" << myrank << ".txt";
    string myfilename = oss.str();

    cout << "Bzz, rank " << myrank << " reporting filename " << myfilename << endl;

    MPI_Finalize();

    return 0;
}


//Output from terminal

 mpirun -n 4 ./main.x prettywoman 20 100000 2.0 2.3 0.01
Worker bee number 0 of 4 will work from temp 2 to 2.065
Worker bee number 1 of 4 will work from temp 2.075 to 2.14
Worker bee number 2 of 4 will work from temp 2.15 to 2.215
Worker bee number 3 of 4 will work from temp 2.225 to 2.29
Bzz, rank 0 reporting filename prettywoman20_rank0.txt
Bzz, rank 2 reporting filename prettywoman20_rank2.txt
Bzz, rank 3 reporting filename prettywoman20_rank3.txt
Bzz, rank 1 reporting filename prettywoman20_rank1.txt

---------------------End-------------------------------------------------


