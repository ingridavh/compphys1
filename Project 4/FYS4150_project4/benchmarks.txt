//Testing the class for a 2x2-lattice

-------------program-------------------------

int main()
{
    cout << "This is a spin system" << endl;
    //Needed parameters are;
    //char outfilename, mcs, initial_temp, final_temp, temp_step

    string outfilename = "results";

    long idum;
    int mcs = 1000000;
    double initial_temp = 1.0;
    double final_temp = 1.0;
    double temp_step = 1;

    int n_spins = 2;

    spinsystem A(n_spins);
    A.go(outfilename, mcs, initial_temp,final_temp, temp_step);

    cout << "This is the end" << endl;
    return 0;
}

-------------------------------------------

-----------output--------------------------
This is a spin system
The average energy is -7.9834
Cv 2.71985e+242
The average magnetization is 0.124182
X 15.9569
abs(M) 3.99444
Final energy is 0
This is the end
-------------------------------------------

-------Using the class on a 20x20 lattice with temp 1, 2.4--------------
int main()
{
    //Needed parameters are;
    //char outfilename, mcs, initial_temp, final_temp, temp_step

    string outfilename = "prettywoman_.txt";
    double n_cycl = 1E5;
    double initial_temp = 2.4;
    double final_temp = 2.4;
    double temp_step = 1;
    int n_spins = 20;

//    spinsystem A(n_spins);
//    A.go(outfilename, n_cycl, initial_temp,final_temp, temp_step);
    //Open output file


    ofstream myfile;
    myfile.open(outfilename.c_str(), ofstream::out);
    if (!myfile.is_open()){
        cout << "FILE " << outfilename.c_str() << " not opened, aborting!" << endl;
        terminate();
    }


    spinsystem mysystem(n_spins);
    mysystem.go(outfilename, n_cycl, initial_temp, final_temp, temp_step);

    return 0;
}
---------------------------------------------------------------------------



------------------------------------------------------------------
//Testing function for MPI

int main(int argc, char* argv[])
{
    int nproc;
    int myrank;
    string filename;
    int N_spins;
    int mcs;
    double initial_temp;
    double final_temp;
    double temp_step;

    // MPI initializations

    MPI_Init (&argc, &argv);
    MPI_Comm_size (MPI_COMM_WORLD, &nproc);
    MPI_Comm_rank (MPI_COMM_WORLD, &myrank);

    if (myrank == 0 && argc <= 5) {
        cout << "Bad Usage: " << argv[0] <<
                " read output file, Number of spins, mc cycles, initial temp, final temp and temp step" << endl;
        exit(1);
    }

    //Tell all nodes about initial variables

    filename=argv[1];
    N_spins = atoi(argv[2]);
    mcs = atoi(argv[3]);
    initial_temp = atof(argv[4]);
    final_temp = atof(argv[5]);
    temp_step = atof(argv[6]);

    cout << "Worker bee no " << myrank << " says the initial temperature is before 'go' " <<
            initial_temp << endl;

    //Testing MPI------------------
    if (myrank==0)
    {
        cout << "HEY! We have " << nproc << " available processors" << endl;
    }

    cout << "Hello world, I have rank " << myrank << " out of " << nproc << endl;

    MPI_Finalize();
    return 0;

}




